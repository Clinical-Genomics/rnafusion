/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]


    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: ENSEMBL_DOWNLOAD {
        publishDir = [
            path: { "${params.genomes_base}/ensembl" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ARRIBA_DOWNLOAD {
        publishDir = [
            path: { "${params.genomes_base}/arriba" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ARRIBA {
        publishDir = [
            path: { "${params.outdir}/arriba" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = "-b ${params.arriba_ref}/blacklist_hg38_GRCh38_2018-11-04.tsv \
        -p ${params.arriba_ref}/protein_domains_hg38_GRCh38_2019-07-05.gff3"
    }

    withName: ERICSCRIPT_DOWNLOAD {
        publishDir = [
            path: { "${params.genomes_base}/ericscript" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: FUSIONCATCHER {
        publishDir = [
            path: { "${params.genomes_base}/fusioncatcher" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.when = params.fusioncatcher
    }

    withName: STAR_GENOMEGENERATE {
        ext.args = "--sjdbOverhang ${params.read_length - 1}"
        publishDir = [
            path: { "${params.genomes_base}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    ]
    }

    withName: FUSIONCATCHER_DOWNLOAD {
        ext.args = "--continue --tries=42"
    }

    withName: KALLISTO_INDEX {
        ext.args = '-k 31'
        publishDir = [
            path: { "${params.genomes_base}/pizzly" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: STARFUSION_DOWNLOAD {
        cpus   = { check_max( 24    * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.d  * task.attempt, 'time'    ) }
        publishDir = [
            path: { "${params.genomes_base}/starfusion" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

//TODO document changes from previous rnafusion version to use star-fusion recommendations
    withName: STAR_FOR_STARFUSION {
        ext.args = '--twopassMode Basic \
        --outReadsUnmapped None \
        --readFilesCommand zcat \
        --outSAMstrandField intronMotif \
        --outSAMunmapped Within \
        --chimSegmentMin 12 \
        --chimJunctionOverhangMin 8 \
        --chimOutJunctionFormat 1 \
        --alignSJDBoverhangMin 10 \
        --alignMatesGapMax 100000 \
        --alignIntronMax 100000 \
        --alignSJstitchMismatchNmax 5 -1 5 5 \
        --chimMultimapScoreRange 3 \
        --chimScoreJunctionNonGTAG -4 \
        --chimMultimapNmax 20 \
        --chimNonchimScoreDropMin 10 \
        --peOverlapNbasesMin 12 \
        --peOverlapMMp 0.1 \
        --alignInsertionFlush Right \
        --alignSplicedMateMapLminOverLmate 0 \
        --alignSplicedMateMapLmin 30 \
        --chimOutType Junctions'
    }

//TODO document changes from previous rnafusion version
    withName: STAR_FOR_ARRIBA {
        ext.args = '--readFilesCommand zcat \
        --outSAMtype BAM Unsorted \
        --outSAMunmapped Within \
        --outBAMcompression 0 \
        --outFilterMultimapNmax 50 \
        --peOverlapNbasesMin 10 \
        --alignSplicedMateMapLminOverLmate 0.5 \
        --alignSJstitchMismatchNmax 5 -1 5 5 \
        --chimSegmentMin 10 \
        --chimOutType WithinBAM HardClip \
        --chimJunctionOverhangMin 10 \
        --chimScoreDropMax 30 \
        --chimScoreJunctionNonGTAG 0 \
        --chimScoreSeparation 1 \
        --chimSegmentReadGapMax 3 \
        --chimMultimapNmax 50'
    }


    //     withName: STAR_FOR_SQUID {
    //     ext.args = '--twopassMode Basic \
    //     --chimOutType SeparateSAMold \
    //     --chimSegmentMin 20 \
    //     --chimJunctionOverhangMin 12 \
    //     --alignSJDBoverhangMin 10 \
    //     --outReadsUnmapped Fastx \
    //     --outSAMstrandField intronMotif \
    //     --outSAMtype BAM SortedByCoordinate \
    //     --readFilesCommand zcat'
    // }


/*
    withName: PIZZLY {
        ext.args = = "-k 31 --align-score 2 --insert-size 400 --cache index.cache.txt"
    }

    withName: STARFUSION {
        ext.args  = "--chimSegmentMin 12 --chimJunctionOverhangMin 8 --chimOutJunctionFormat 1 --alignSJDBoverhangMin 10 --alignMatesGapMax 100000 --alignIntronMax 100000 --alignSJstitchMismatchNmax 5 -1 5 5 --outSAMattrRGline ID:GRPundef --chimMultimapScoreRange 3 --chimScoreJunctionNonGTAG -4 --chimMultimapNmax 20 --chimNonchimScoreDropMin 10 --peOverlapNbasesMin 12 --peOverlapMMp 0.1 --alignInsertionFlush Right --alignSplicedMateMapLminOverLmate 0 --alignSplicedMateMapLmin 30"
        ext.args2 = "--examine_coding_effect -J Chimeric.out.junction"
    }

    withName: ARRIBA {
        ext.args  = "--outFilterMultimapNmax 50 --peOverlapNbasesMin 10 --alignSplicedMateMapLminOverLmate 0.5 --alignSJstitchMismatchNmax 5 -1 5 5 --chimSegmentMin 10 --chimOutType WithinBAM HardClip --chimJunctionOverhangMin 10 --chimScoreDropMax 30 --chimScoreJunctionNonGTAG 0 --chimScoreSeparation 1 --chimSegmentReadGapMax 3 --chimMultimapNmax 50"
        ext.args2 = "-b references/${params.genome}/arriba/blacklist_hg38_GRCh38_v2.1.0.tsv.gz -k references/${params.genome}/arriba/known_fusions_hg38_GRCh38_v2.1.0.tsv.gz -p references/${params.genome}/arriba/protein_domains_hg38_GRCh38_v2.1.0.gff3"
    }

*/


}


